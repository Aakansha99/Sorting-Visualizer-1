{"version":3,"sources":["Navigation.js","Algorithms/MergeSort.js","Algorithms/CombSort.js","Algorithms/ShellSort.js","Algorithms/SlowSort.js","Algorithms/QuickSortFirst.js","Algorithms/QuickSortLast.js","SortingPanel.js","Algorithms/CocktailSort.js","Algorithms/InsertionSort.js","Algorithms/SelectionSort.js","Algorithms/BubbleSort.js","SortingShow.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","className","href","Component","getMergeSortAnimations","array","animations","length","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","tempArray","slice","push","doMerge","getCombSortAnimations","gap","swapped","temp","combSort","console","log","getShellSortAnimations","shellSort","getSlowSortAnimations","slowSort","start","end","mid","getQuickSortFirstAnimations","quickSortFirst","pivotIdx","pivotValue","lower","run","partition","getQuickSortLastAnimations","quickSortLast","currentSmaller","tempx","SortingPanel","props","state","sortingAlgo","handleSort","bind","e","target","value","this","setState","onCompareColor","initialColor","speed","OriginalArray","arrayBars","document","getElementsByClassName","animatingArray","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","swap","keep","CocktailSort","getCocktailSortAnimations","insertionSort","getInsertionSortAnimations","smallest","smallestIdx","selectionSort","getSelectionSortAnimations","bubbleSort","getBubbleSortAnimations","name","type","min","max","numInArray","onChange","handleSetting","onClick","handleReset","role","SortingShow","width","map","item","index","margin","key","App","currentAlgo","newArray","random","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.95c1561b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Navigation extends Component {\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-expand-sm bg-primary navbar-dark\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          Sorting Visualizer\r\n        </a>\r\n        <div className=\"navbar-nav\">\r\n          <div className=\"nav-item mx-auto\">\r\n            <a\r\n              className=\"nav-link \"\r\n              href=\"https://github.com/tlylt/Sorting-Visualizer.git\"\r\n            >\r\n              Github Repo\r\n            </a>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\nexport default Navigation;\r\n","export function getMergeSortAnimations(array) {\r\n  //takes a unsorted array\r\n  //initiate a new array for record and animation\r\n  const animations = [];\r\n  //if array size is 1, it is sorted, return array without doing merge sort\r\n  if (array.length <= 1) return array;\r\n  //sort the array using merge sort and return a animation array\r\n  mergeSortHelper(array, 0, array.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(mainArray, startIdx, endIdx, animations) {\r\n  // if starting and end is the same, array is sorted, return array\r\n  if (startIdx === endIdx) return;\r\n  //find out the middle index\r\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n  //calling recursively with first part of the array\r\n  mergeSortHelper(mainArray, startIdx, middleIdx, animations);\r\n  //calling recursively with second part of the array\r\n  mergeSortHelper(mainArray, middleIdx + 1, endIdx, animations);\r\n  //once two smaller pieces are ready, merge them\r\n  doMerge(mainArray, startIdx, middleIdx, endIdx, animations);\r\n}\r\n\r\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, animations) {\r\n  let k = startIdx;\r\n  let i = startIdx;\r\n  let j = middleIdx + 1;\r\n  const tempArray = mainArray.slice();\r\n  while (i <= middleIdx && j <= endIdx) {\r\n    //comparing i and j, both the start of each array\r\n    //record it in animation array\r\n    animations.push([i, j]);\r\n    animations.push([i, j]);\r\n    if (tempArray[i] <= tempArray[j]) {\r\n      animations.push([k, tempArray[i]]);\r\n      //following is equivalent to mainArray[k]=auxiliaryArray[i]; k++, i++\r\n      //adjusts the true mainArray\r\n      mainArray[k++] = tempArray[i++];\r\n    } else {\r\n      animations.push([k, tempArray[j]]);\r\n      mainArray[k++] = tempArray[j++];\r\n    }\r\n  }\r\n  //for cases that one side is smaller than the other side\r\n  //just move the sorted items on that side over to mainArray\r\n  while (i <= middleIdx) {\r\n    animations.push([k, i]);\r\n    animations.push([k, i]);\r\n    animations.push([k, tempArray[i]]);\r\n    mainArray[k++] = tempArray[i++];\r\n  }\r\n  while (j <= endIdx) {\r\n    animations.push([k, j]);\r\n    animations.push([k, j]);\r\n    animations.push([k, tempArray[j]]);\r\n    mainArray[k++] = tempArray[j++];\r\n  }\r\n}\r\n","//improves on bubble sort\r\nexport function getCombSortAnimations(array) {\r\n  const animations = [];\r\n  combSort(array, animations);\r\n  console.log(animations);\r\n  return animations;\r\n}\r\n\r\nfunction combSort(array, animations) {\r\n  let gap = array.length;\r\n  let swapped = true;\r\n  while (swapped) {\r\n    //different from shell sort as it does not guarentee\r\n    //that array will be completely sorted when gap reaches one\r\n    //after the gap reaches one, keep on bubble sort till the array is sorted\r\n    gap <= 1 ? (gap = 1) : (gap = Math.floor(gap / 1.3));\r\n    swapped = false;\r\n    for (let i = 0; i < array.length - gap; i++) {\r\n      if (array[i] > array[i + gap]) {\r\n        animations.push([i, i + gap]);\r\n        animations.push([i, i + gap]);\r\n        animations.push([i + gap, array[i]]);\r\n        animations.push([i, array[i + gap]]);\r\n        let temp = array[i + gap];\r\n        array[i + gap] = array[i];\r\n        array[i] = temp;\r\n        swapped = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n","//improves on insertion sort, which is a gap=1 shell sort\r\n\r\nexport function getShellSortAnimations(array) {\r\n  let animations = [];\r\n  shellSort(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction shellSort(array, animations) {\r\n  //initialize a gap and decreases it until 1, which will then perform an insertion sort\r\n  // every pass shell sort will ensure the pattern is completely sorted\r\n  let gap = array.length;\r\n  while (gap >= 1) {\r\n    for (let i = 0; i < array.length; i += gap) {\r\n      for (let j = i; j > 0; j -= gap) {\r\n        if (array[j] < array[j - gap]) {\r\n          //animation of swapping the bars to their correct order\r\n          //to stimulate inserting the bar into the right place\r\n          //and shifting every bar on its right to the right by one\r\n          animations.push([j, j - gap]);\r\n          animations.push([j, j - gap]);\r\n          animations.push([j, array[j - gap]]);\r\n          animations.push([j - gap, array[j]]);\r\n          let temp = array[j];\r\n          array[j] = array[j - gap];\r\n          array[j - gap] = temp;\r\n        }\r\n      }\r\n    }\r\n    gap = Math.floor(gap / 2);\r\n  }\r\n}\r\n","export function getSlowSortAnimations(array) {\r\n  const animations = [];\r\n  let start = 0;\r\n  let end = array.length - 1;\r\n  slowSort(array, start, end, animations);\r\n  return animations;\r\n}\r\n\r\nfunction slowSort(array, start, end, animations) {\r\n  if (start >= end) {\r\n    return;\r\n  }\r\n  let mid = Math.floor((start + end) / 2);\r\n  //when recursively split until 2 elements, following 2 statements will just return\r\n  slowSort(array, start, mid, animations);\r\n  slowSort(array, mid + 1, end, animations);\r\n  //with 2 sub array, mid is actually equals to\r\n  //the last element of the first sorted sub array (meaning the largest in the sub array)\r\n  //compares the last elements of both sub array and swapped them if necessary\r\n  if (array[mid] > array[end]) {\r\n    animations.push([mid, end]);\r\n    animations.push([mid, end]);\r\n    animations.push([mid, array[end]]);\r\n    animations.push([end, array[mid]]);\r\n    let temp = array[mid];\r\n    array[mid] = array[end];\r\n    array[end] = temp;\r\n  }\r\n  //above steps will set the largest element to the end of array\r\n  slowSort(array, start, end - 1, animations);\r\n}\r\n","//Always selecting the first element as pivot\r\nexport function getQuickSortFirstAnimations(array) {\r\n  const animations = [];\r\n  let start = 0;\r\n  let end = array.length - 1;\r\n  quickSortFirst(array, start, end, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortFirst(array, start, end, animations) {\r\n  if (start >= end) {\r\n    return;\r\n  }\r\n  let pivotIdx = partition(array, start, end, animations);\r\n  quickSortFirst(array, start, pivotIdx - 1, animations);\r\n  quickSortFirst(array, pivotIdx + 1, end, animations);\r\n}\r\n\r\nfunction partition(array, start, end, animations) {\r\n  let pivotValue = array[start];\r\n  let lower = start + 1;\r\n  let run = true;\r\n  while (run) {\r\n    while (array[lower] <= pivotValue && lower <= end) {\r\n      animations.push([start, lower]);\r\n      animations.push([start, lower]);\r\n      animations.push([0, array[0]]);\r\n      animations.push([0, array[0]]);\r\n      lower += 1;\r\n    }\r\n    while (array[end] >= pivotValue && lower <= end) {\r\n      animations.push([start, end]);\r\n      animations.push([start, end]);\r\n      animations.push([0, array[0]]);\r\n      animations.push([0, array[0]]);\r\n      end -= 1;\r\n    }\r\n    if (end < lower) {\r\n      run = false;\r\n    } else {\r\n      animations.push([lower, end]);\r\n      animations.push([lower, end]);\r\n      animations.push([lower, array[end]]);\r\n      animations.push([end, array[lower]]);\r\n      let temp = array[lower];\r\n      array[lower] = array[end];\r\n      array[end] = temp;\r\n    }\r\n  }\r\n  animations.push([start, end]);\r\n  animations.push([start, end]);\r\n  animations.push([start, array[end]]);\r\n  animations.push([end, pivotValue]);\r\n  let temp = array[end];\r\n  array[end] = pivotValue;\r\n  array[start] = temp;\r\n  return end;\r\n}\r\n","//Always selecting the last element as pivot\r\nexport function getQuickSortLastAnimations(array) {\r\n  const animations = [];\r\n  let start = 0;\r\n  let end = array.length - 1;\r\n  quickSortLast(array, start, end, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortLast(array, start, end, animations) {\r\n  if (start >= end) {\r\n    return;\r\n  }\r\n  let pivotIdx = partition(array, start, end, animations);\r\n  quickSortLast(array, start, pivotIdx - 1, animations);\r\n  quickSortLast(array, pivotIdx + 1, end, animations);\r\n}\r\n\r\nfunction partition(array, start, end, animations) {\r\n  let pivotValue = array[end];\r\n  let currentSmaller = start - 1;\r\n  while (start < end) {\r\n    animations.push([start, end]);\r\n    animations.push([start, end]);\r\n    if (array[start] <= pivotValue) {\r\n      currentSmaller += 1;\r\n      animations.push([start, array[currentSmaller]]);\r\n      animations.push([currentSmaller, array[start]]);\r\n      let tempx = array[currentSmaller];\r\n      array[currentSmaller] = array[start];\r\n      array[start] = tempx;\r\n    } else {\r\n      animations.push([0, array[0]]);\r\n      animations.push([0, array[0]]);\r\n    }\r\n    start += 1;\r\n  }\r\n  animations.push([end, currentSmaller + 1]);\r\n  animations.push([end, currentSmaller + 1]);\r\n  animations.push([end, array[currentSmaller + 1]]);\r\n  animations.push([currentSmaller + 1, array[end]]);\r\n  let temp = array[currentSmaller + 1];\r\n  array[currentSmaller + 1] = pivotValue;\r\n  array[end] = temp;\r\n  return currentSmaller + 1;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { getMergeSortAnimations } from \"./Algorithms/MergeSort\";\r\nimport { getBubbleSortAnimations } from \"./Algorithms/BubbleSort\";\r\nimport { getSelectionSortAnimations } from \"./Algorithms/SelectionSort\";\r\nimport { getInsertionSortAnimations } from \"./Algorithms/InsertionSort\";\r\nimport { getCombSortAnimations } from \"./Algorithms/CombSort\";\r\nimport { getShellSortAnimations } from \"./Algorithms/ShellSort\";\r\nimport { getCocktailSortAnimations } from \"./Algorithms/CocktailSort\";\r\nimport { getSlowSortAnimations } from \"./Algorithms/SlowSort\";\r\nimport { getQuickSortFirstAnimations } from \"./Algorithms/QuickSortFirst\";\r\nimport { getQuickSortLastAnimations } from \"./Algorithms/QuickSortLast\";\r\n\r\nclass SortingPanel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      sortingAlgo: \"\"\r\n    };\r\n    this.handleSort = this.handleSort.bind(this);\r\n  }\r\n  handleSort(e) {\r\n    const sortingAlgo = e.target.value;\r\n    this.setState({\r\n      sortingAlgo: sortingAlgo\r\n    });\r\n    const { onCompareColor, initialColor, speed, OriginalArray } = this.props;\r\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n    switch (sortingAlgo) {\r\n      case \"quickSortFirst\": {\r\n        const animatingArray = getQuickSortFirstAnimations(OriginalArray);\r\n        for (let i = 0; i < animatingArray.length; i++) {\r\n          const colorChange = i % 4 <= 1;\r\n          if (colorChange) {\r\n            const [barOneIdx, barTwoIdx] = animatingArray[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 4 === 0 ? onCompareColor : initialColor;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * speed);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animatingArray[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * speed);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case \"quickSortLast\": {\r\n        const animatingArray = getQuickSortLastAnimations(OriginalArray);\r\n        for (let i = 0; i < animatingArray.length; i++) {\r\n          const colorChange = i % 4 <= 1;\r\n          if (colorChange) {\r\n            const [barOneIdx, barTwoIdx] = animatingArray[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 4 === 0 ? onCompareColor : initialColor;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * speed);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animatingArray[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * speed);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case \"slowSort\": {\r\n        const animatingArray = getSlowSortAnimations(OriginalArray);\r\n        for (let i = 0; i < animatingArray.length; i++) {\r\n          const colorChange = i % 4 <= 1;\r\n          if (colorChange) {\r\n            const [barOneIdx, barTwoIdx] = animatingArray[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 4 === 0 ? onCompareColor : initialColor;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * speed);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animatingArray[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * speed);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case \"cocktailSort\":{\r\n        const animatingArray = getCocktailSortAnimations(OriginalArray);\r\n        for (let i = 0; i < animatingArray.length; i++) {\r\n          const colorChange = i % 4 <= 1;\r\n          if (colorChange) {\r\n            const [barOneIdx, barTwoIdx] = animatingArray[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 4 === 0 ? onCompareColor : initialColor;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * speed);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animatingArray[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * speed);\r\n          }\r\n        }\r\n        break;}\r\n      case \"shellSort\":{\r\n        const animatingArray = getShellSortAnimations(OriginalArray);\r\n        for (let i = 0; i < animatingArray.length; i++) {\r\n          const colorChange = i % 4 <= 1;\r\n          if (colorChange) {\r\n            const [barOneIdx, barTwoIdx] = animatingArray[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 4 === 0 ? onCompareColor : initialColor;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * speed);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animatingArray[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * speed);\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case \"combSort\":{\r\n        const animatingArray = getCombSortAnimations(OriginalArray);\r\n        for (let i = 0; i < animatingArray.length; i++) {\r\n          const colorChange = i % 4 <= 1;\r\n          if (colorChange) {\r\n            const [barOneIdx, barTwoIdx] = animatingArray[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 4 === 0 ? onCompareColor : initialColor;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * speed);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animatingArray[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * speed);\r\n          }\r\n        }\r\n        break;}\r\n      case \"insertionSort\":{\r\n        const animatingArray = getInsertionSortAnimations(OriginalArray);\r\n        for (let i = 0; i < animatingArray.length; i++) {\r\n          const colorChange = i % 4 <= 1;\r\n          if (colorChange) {\r\n            const [barOneIdx, barTwoIdx] = animatingArray[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 4 === 0 ? onCompareColor : initialColor;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * speed);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animatingArray[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * speed);\r\n          }\r\n        }\r\n        break;}\r\n      case \"selectionSort\":{\r\n        const animatingArray = getSelectionSortAnimations(OriginalArray);\r\n        for (let i = 0; i < animatingArray.length; i++) {\r\n          const colorChange = i % 4 <= 1;\r\n          if (colorChange) {\r\n            const [barOneIdx, barTwoIdx] = animatingArray[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 4 === 0 ? onCompareColor : initialColor;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * speed);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animatingArray[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * speed);\r\n          }\r\n        }\r\n        break;}\r\n      case \"bubbleSort\":{\r\n        const animatingArray = getBubbleSortAnimations(OriginalArray);\r\n        for (let i = 0; i < animatingArray.length; i++) {\r\n          const colorChange = i % 4 <= 1;\r\n          if (colorChange) {\r\n            const [barOneIdx, barTwoIdx] = animatingArray[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 4 === 0 ? onCompareColor : initialColor;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * speed);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animatingArray[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * speed);\r\n          }\r\n        }\r\n        break;}\r\n      case \"mergeSort\":{\r\n        const animatingArray = getMergeSortAnimations(OriginalArray);\r\n        for (let i = 0; i < animatingArray.length; i++) {\r\n          const colorChange = i % 3 !== 2;\r\n          if (colorChange) {\r\n            const [barOneIdx, barTwoIdx] = animatingArray[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            const color = i % 3 === 0 ? onCompareColor : initialColor;\r\n            setTimeout(() => {\r\n              barOneStyle.backgroundColor = color;\r\n              barTwoStyle.backgroundColor = color;\r\n            }, i * speed);\r\n          } else {\r\n            setTimeout(() => {\r\n              const [barOneIdx, newHeight] = animatingArray[i];\r\n              const barOneStyle = arrayBars[barOneIdx].style;\r\n              barOneStyle.height = `${newHeight}px`;\r\n            }, i * speed);\r\n          }\r\n        }\r\n        break;}\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"container mb-3\">\r\n        <div className=\"row shadow-sm justify-content-center pb-2\">\r\n          <div className=\"col-2\">\r\n            <div className=\"row justify-content-center\">\r\n              <label>Array Size</label>\r\n              <input\r\n                className=\"custom-range\"\r\n                name=\"numInArray\"\r\n                type=\"range\"\r\n                min=\"5\"\r\n                max=\"150\"\r\n                value={this.props.numInArray}\r\n                onChange={e => this.props.handleSetting(e)}\r\n              />\r\n            </div>\r\n            <div className=\"row justify-content-center\">\r\n              <label>Animation Speed</label>\r\n              <input\r\n                className=\"custom-range\"\r\n                name=\"speed\"\r\n                type=\"range\"\r\n                min=\"1\"\r\n                max=\"100\"\r\n                value={this.props.speed}\r\n                onChange={e => this.props.handleSetting(e)}\r\n              />\r\n            </div>\r\n            <div className=\"row justify-content-center\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-primary btn-sm\"\r\n                onClick={this.props.handleReset}\r\n              >\r\n                Reset\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-auto\">\r\n            <div className=\"row align-items-start ml-2 my-4\">\r\n              <div className=\"btn-group-sm btn-group-vertical\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-secondary \"\r\n                  value=\"mergeSort\"\r\n                  onClick={e => this.handleSort(e)}\r\n                >\r\n                  Merge Sort\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-secondary\"\r\n                  value=\"selectionSort\"\r\n                  onClick={e => this.handleSort(e)}\r\n                >\r\n                  Selection Sort\r\n                </button>\r\n              </div>\r\n              <div className=\"btn-group-sm btn-group-vertical\" role=\"group\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-secondary\"\r\n                  value=\"bubbleSort\"\r\n                  onClick={e => this.handleSort(e)}\r\n                >\r\n                  Bubble Sort\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-secondary\"\r\n                  value=\"cocktailSort\"\r\n                  onClick={e => this.handleSort(e)}\r\n                >\r\n                  Cocktail Sort\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-secondary\"\r\n                  value=\"combSort\"\r\n                  onClick={e => this.handleSort(e)}\r\n                >\r\n                  Comb Sort\r\n                </button>\r\n              </div>\r\n              <div className=\"btn-group-sm btn-group-vertical\" role=\"group\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-secondary\"\r\n                  value=\"insertionSort\"\r\n                  onClick={e => this.handleSort(e)}\r\n                >\r\n                  Insertion Sort\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-secondary\"\r\n                  value=\"shellSort\"\r\n                  onClick={e => this.handleSort(e)}\r\n                >\r\n                  Shell Sort\r\n                </button>\r\n              </div>\r\n              <div className=\"btn-group-sm btn-group-vertical\" role=\"group\">\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-secondary\"\r\n                  value=\"slowSort\"\r\n                  onClick={e => this.handleSort(e)}\r\n                >\r\n                  Slow Sort\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-secondary\"\r\n                  value=\"quickSortFirst\"\r\n                  onClick={e => this.handleSort(e)}\r\n                >\r\n                  Quick Sort(FirstIdx)\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"btn btn-outline-secondary\"\r\n                  value=\"quickSortLast\"\r\n                  onClick={e => this.handleSort(e)}\r\n                >\r\n                  Quick Sort(LastIdx)\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default SortingPanel;\r\n","//unidirectional bubble sort\r\n//moving the largest to the end and moving the smallest to the start\r\nexport function getCocktailSortAnimations(array) {\r\n  const animations = [];\r\n  CocktailSort(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction CocktailSort(array, animations) {\r\n  let start = 0;\r\n  let end = array.length - 1;\r\n  let swap = true;\r\n  while (start !== end && swap) {\r\n    swap = false;\r\n    for (let j = start; j < end; j++) {\r\n      if (array[j] > array[j + 1]) {\r\n        animations.push([j, j + 1]);\r\n        animations.push([j, j + 1]);\r\n        animations.push([j, array[j + 1]]);\r\n        animations.push([j + 1, array[j]]);\r\n        let temp = array[j];\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n        swap = true;\r\n      }\r\n    }\r\n    start++;\r\n    for (let k = end - 1; k >= start; k--) {\r\n      if (array[k] < array[k - 1]) {\r\n        animations.push([k, k - 1]);\r\n        animations.push([k, k - 1]);\r\n        animations.push([k, array[k - 1]]);\r\n        animations.push([k - 1, array[k]]);\r\n        let keep = array[k];\r\n        array[k] = array[k - 1];\r\n        array[k - 1] = keep;\r\n        swap = true;\r\n      }\r\n    }\r\n    end--;\r\n  }\r\n}\r\n","//While advancing to the right, every bar on the left is sorted\r\n//for every new bar, insert it into the right place on the left\r\nexport function getInsertionSortAnimations(array) {\r\n  const animations = [];\r\n  insertionSort(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction insertionSort(array, animations) {\r\n  for (let i = 0; i < array.length; i++) {\r\n    for (let j = i; j > 0; j--) {\r\n      if (array[j] < array[j - 1]) {\r\n        animations.push([j, j - 1]);\r\n        animations.push([j, j - 1]);\r\n        animations.push([j - 1, array[j]]);\r\n        animations.push([j, array[j - 1]]);\r\n        let temp = array[j];\r\n        array[j] = array[j - 1];\r\n        array[j - 1] = temp;\r\n      }\r\n    }\r\n  }\r\n}\r\n","//loop through and places the smallest element at the start\r\nexport function getSelectionSortAnimations(array) {\r\n  const animations = [];\r\n  selectionSort(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction selectionSort(array, animations) {\r\n  for (let i = 0; i < array.length - 1; i++) {\r\n    let smallest = array[i];\r\n    let smallestIdx = i;\r\n    for (let j = i + 1; j < array.length; j++) {\r\n      animations.push([smallestIdx, j]);\r\n      animations.push([smallestIdx, j]);\r\n      animations.push([0, array[0]]);\r\n      animations.push([0, array[0]]);\r\n      if (array[j] < smallest) {\r\n        //updates the smallest element and its index\r\n        smallest = array[j];\r\n        smallestIdx = j;\r\n      }\r\n    }\r\n    animations.push([i, smallestIdx]);\r\n    animations.push([i, smallestIdx]);\r\n    animations.push([i, smallest]);\r\n    animations.push([smallestIdx, array[i]]);\r\n    let temp = array[i];\r\n    array[i] = smallest;\r\n    array[smallestIdx] = temp;\r\n  }\r\n}\r\n","//Loop through the array, shifting the largest element to the end each time\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = [];\r\n  bubbleSort(array, animations);\r\n  return animations;\r\n}\r\n\r\nfunction bubbleSort(array, animations) {\r\n  let end = array.length - 1;\r\n  while (end >= 1) {\r\n    for (let j = 0; j < end; j++) {\r\n      if (array[j] > array[j + 1]) {\r\n        animations.push([j, j + 1]);\r\n        animations.push([j, j + 1]);\r\n        animations.push([j, array[j + 1]]);\r\n        animations.push([j + 1, array[j]]);\r\n        let temp = array[j];\r\n        array[j] = array[j + 1];\r\n        array[j + 1] = temp;\r\n      }\r\n    }\r\n    end--;\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nfunction SortingShow(props) {\r\n  const { OriginalArray, initialColor } = props;\r\n  return (\r\n    <div\r\n      className=\"array-container d-flex flex-row justify-content-center align-items-end col-auto\"\r\n      style={{ height: \"400px\", width: \"1200px\" }}\r\n    >\r\n      {OriginalArray.map((item, index) => (\r\n        <div\r\n          className=\"array-bar\"\r\n          style={{\r\n            height: `${item}px`,\r\n            width: \"20px\",\r\n            margin: \"0 1px\",\r\n            backgroundColor: `${initialColor}`\r\n          }}\r\n          key={index}\r\n        ></div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SortingShow;\r\n","import React, { Component } from \"react\";\nimport Navigation from \"./Navigation\";\nimport SortingPanel from \"./SortingPanel\";\nimport SortingShow from \"./SortingShow\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      OriginalArray: [],\n      numInArray: 75,\n      speed: 1,\n      initialColor: \"black\",\n      onCompareColor: \"red\",\n      currentAlgo: \"\"\n    };\n    this.handleReset = this.handleReset.bind(this);\n    this.handleSetting = this.handleSetting.bind(this);\n  }\n  componentDidMount() {\n    this.handleReset();\n  }\n  handleSetting(e) {\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState({\n      [name]: value\n    });\n  }\n  handleReset() {\n    const newArray = [];\n    for (let i = 0; i < this.state.numInArray; i++) {\n      newArray.push(randomIntFromInterval(5, 400));\n    }\n    this.setState({\n      OriginalArray: newArray\n    });\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <Navigation />\n        <SortingPanel\n          handleReset={this.handleReset}\n          handleSetting={this.handleSetting}\n          numInArray={this.state.numInArray}\n          onCompareColor={this.state.onCompareColor}\n          initialColor={this.state.initialColor}\n          speed={this.state.speed}\n          OriginalArray={this.state.OriginalArray}\n        />\n        <SortingShow\n          OriginalArray={this.state.OriginalArray}\n          initialColor={this.state.initialColor}\n        />\n      </div>\n    );\n  }\n}\n\n// https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.register();\n"],"sourceRoot":""}